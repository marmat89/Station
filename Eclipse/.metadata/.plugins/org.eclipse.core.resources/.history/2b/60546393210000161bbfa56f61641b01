package it.unibo.system;

import it.unibo.interfaces.StationRPI;
import it.unibo.util.AssembledList;

import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;

public class CommunicatorSQL {

	public CommunicatorSQL() {
		super();
	}

	/**
	 * Send measure to DB need to know Sation and his last Update measure list
	 * read all measure and update them to DB
	 * 
	 * @param stat
	 *            Input station for data
	 * @param lastUpdate
	 *            Last measure received from sensor
	 */
	public void sendMes(StationRPI stat, List<AssembledList> lastUpdate) {
		Statement stmt;
		DateFormat df = new SimpleDateFormat("yy/MM/dd HH:mm:ss");
		Calendar calobj = Calendar.getInstance();
		Iterator<AssembledList> itLast = lastUpdate.iterator();
		while (itLast.hasNext()) {
			AssembledList row = (AssembledList) itLast.next();
			if (row != null) {
				try {
					stmt = (Statement) db.createStatement();
					System.out
							.println("INSERT INTO `RCSdb`.`Measure` (`desc`, `dataObtained`, `datatype`, `reliability`, `value`, `Assembled_Stations_idStations`, `Assembled_Sensors_idSen`) VALUES ('getFrom"
									+ stat.getName()
									+ "', '"
									+ (df.format(calobj.getTime()))
									+ "', '"
									+ row.sen.getDatatype()
									+ "', '0', '"
									+ row.lastMes.getValue()
									+ "', '"
									+ stat.ID
									+ "', '" + row.sen.getName() + "');");
					stmt.execute("INSERT INTO `RCSdb`.`Measure` (`desc`, `dataObtained`, `datatype`, `reliability`, `value`, `Assembled_Stations_idStations`, `Assembled_Sensors_idSen`) VALUES ('getFrom"
							+ stat.getName()
							+ "', '"
							+ (df.format(calobj.getTime()))
							+ "', '"
							+ row.sen.getDatatype()
							+ "', '0', '"
							+ row.lastMes.getValue()
							+ "', '"
							+ stat.ID
							+ "', '" + row.sen.getName() + "');");
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	
	}

	/**
	 * 
	 * Upload error on DB, with String param we can find correct data error
	 * format
	 * 
	 * @param statID
	 *            Station primary key
	 * @param senName
	 *            Sensor pimary key
	 * @param type
	 *            ErrorType
	 * @param erDesc
	 *            Error Desc
	 */
	public void sendErr(String statID, String senName, String type, String erDesc) {
	
		Statement stmt;
		DateFormat df = new SimpleDateFormat("yy/MM/dd HH:mm:ss");
		Calendar calobj = Calendar.getInstance();
	
		if (senName != null) {
			try {
				stmt = (Statement) db.createStatement();
				System.out
						.println("INSERT INTO `rcsdb`.`errors` (`erDesc`, `assembled_Stations_idStations`, `assembled_Sensors_idSen`, `machine_idMachine`, `ErrorType_idErrorType`, `erData`)  VALUES ('"
								+ erDesc
								+ "', '"
								+ statID
								+ "', '"
								+ senName
								+ "', 'RPI','"
								+ type
								+ "','"
								+ (df.format(calobj.getTime())) + "');");
				stmt.execute("INSERT INTO `rcsdb`.`errors` (`erDesc`, `assembled_Stations_idStations`, `assembled_Sensors_idSen`, `machine_idMachine`, `ErrorType_idErrorType`, `erData`)  VALUES ('"
						+ erDesc
						+ "', '"
						+ statID
						+ "', '"
						+ senName
						+ "', 'RPI','"
						+ type
						+ "','"
						+ (df.format(calobj.getTime())) + "');");
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	
	}

}